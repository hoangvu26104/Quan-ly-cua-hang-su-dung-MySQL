# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ReportDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QVBoxLayout
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import mysql.connector

class Report_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(950, 750)
        
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 550, 370))
        self.verticalLayout = QVBoxLayout(self.verticalLayoutWidget)
        
        self.verticalLayoutWidget2 = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget2.setGeometry(QtCore.QRect(10, 380, 550, 360))
        self.verticalLayout2 = QVBoxLayout(self.verticalLayoutWidget2)
        
        self.label_summary = QtWidgets.QLabel(Dialog)
        self.label_summary.setGeometry(QtCore.QRect(550, 25, 400, 700))
        self.label_summary.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_summary.setObjectName("label_summary")
        
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        # Fetch data and create plots
        self.addPlots()
        
        self.getSummary()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Report"))
        self.label_summary.setText(_translate("Dialog", "Summary"))

    def fetchData(self):
        conn = mysql.connector.connect(
            host="monorail.proxy.rlwy.net",
            user="root",
            password="xIbazQgoTOmqlVFBFVpELtNnscUXRTfq",
            database="railway",
            port="45681"
        )
        cursor = conn.cursor()
        
        cursor.execute("SELECT type_id, COUNT(*) FROM products GROUP BY type_id")
        type_data = cursor.fetchall()
        
        cursor.execute("""
            SELECT 
                CASE 
                    WHEN price < 1000000 THEN '<1000000'
                    WHEN price BETWEEN 1000000 AND 5000000 THEN '1000000-5000000'
                    ELSE '>5000000'
                END as price_range,
                COUNT(*) 
            FROM products 
            GROUP BY price_range
        """)
        price_data = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        return type_data, price_data

    def addPlots(self):
        type_data, price_data = self.fetchData()
        
        # Prepare data for plotting
        categories, type_counts = zip(*type_data)
        price_ranges, price_counts = zip(*price_data)
        
        # # Plotting the Type Plot
        # fig1, ax1 = plt.subplots()
        # ax1.bar(types, type_counts)
        # ax1.set_title('Number of product by Type')
        # canvas1 = FigureCanvas(fig1)
        # self.verticalLayout.addWidget(canvas1)
        categories = ['KitchenEquipment', 'HouseholdAppliances']
        
        fig1, ax1 = plt.subplots()
        ax1.bar(categories, type_counts, color=['blue', 'green'])
        ax1.set_xlabel('Category')
        ax1.set_ylabel('Count')
        ax1.set_title('Number of Products by Category')
        canvas1 = FigureCanvas(fig1)
        self.verticalLayout.addWidget(canvas1)
        
        # Plotting the Price Plot (Pie Chart)
        fig2, ax2 = plt.subplots()
        ax2.pie(price_counts, labels=price_ranges, autopct='%1.1f%%', startangle=140)
        ax2.set_title('Number of product by Price Range')
        canvas2 = FigureCanvas(fig2)
        self.verticalLayout2.addWidget(canvas2)
    def getSummary(self):
        type_data, price_data = self.fetchData()
        if not type_data or not price_data:
            summary = "No data available."
        else:
            types = ['KitchenEquipment', 'HouseholdAppliances']
            full_type_names = ['Kitchen Equipment', 'Household Appliances']  # Tên đầy đủ tương ứng với các loại sản phẩm
            types, type_counts = zip(*type_data)
            price_ranges, price_counts = zip(*price_data)
            most_type_index = type_counts.index(max(type_counts))
            most_type_name = types[most_type_index]

            # Ánh xạ most_type_name thành tên đầy đủ tương ứng
            most_type_full_name = full_type_names[types.index(most_type_name)]
            most_type_count = type_counts[most_type_index]
            summary = f"""
                              Summary
        ------------------------------------------------------
        The most type product: {most_type_full_name} 
        (Count: {most_type_count})

        
        Product prices in ranges from 
        under 1000000: {price_counts[0]} products
        
        Product prices range from 
        over 1000000 to 5000000: {price_counts[1]} products
        
        Product prices in ranges from above 5000000: 
        {price_counts[2]} products
        
        ------------------------------------------------------
        The number of products: {sum(type_counts)} products
            """
        self.label_summary.setText(summary)
        self.label_summary.setWordWrap(True)
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Report_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
